plugins {
    id 'java' // (또는 'java-library')
    // ⚠️ ewerk 플러그인 제거: id 'com.ewerk.gradle.plugins.querydsl' 버전 '1.0.10'
}

group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    // JPA / Validation API
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'

    // Hibernate (엔티티 컴파일 시 참조)
    implementation 'org.hibernate.orm:hibernate-core:6.4.4.Final'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    // Test
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    // Swagger (필요 시)
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

    // ✅ QueryDSL (Jakarta) — 플러그인 없이 annotationProcessor만 사용
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api:3.1.0'
}

// ✅ 생성 소스 출력 경로(Gradle 표준 위치)
def qdslOut = layout.buildDirectory.dir("generated/sources/annotationProcessor/java/main").get().asFile

sourceSets {
    main {
        java {
            srcDir qdslOut   // 생성된 Q클래스를 컴파일 소스에 추가
        }
    }
}

// ✅ 자바 컴파일러가 annotation processor 생성물을 위 경로에 출력하도록 지정
tasks.withType(JavaCompile).configureEach {
    // 선택: 경고 끄기
    options.compilerArgs += ['-Xlint:none']
    // 생성물 디렉토리 지정
    options.annotationProcessorGeneratedSourcesDirectory = qdslOut
}

// ❌ 전부 제거해야 하는 것들 (있으면 주석/삭제)
// querydsl { ... }                     // ewerk 전용 블록
// configurations { querydsl { ... } }  // ewerk 방식
// compileQuerydsl { ... }              // 커스텀 task
// compileJava.dependsOn compileQuerydsl

test {
    useJUnitPlatform()
}
